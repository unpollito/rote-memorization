/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **flashcards**
   * - Table in database
   */
  export namespace flashcards {
    export type Table = 'flashcards';
    export interface Selectable {
      /**
      * **flashcards.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **flashcards.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **flashcards.bin**
      * - `int2` in database
      * - `NOT NULL`, default: `0`
      */
      bin: number;
      /**
      * **flashcards.last_answer_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_answer_at: Date | null;
      /**
      * **flashcards.num_failed_answers**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_failed_answers: number;
      /**
      * **flashcards.front_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      front_text: string;
      /**
      * **flashcards.back_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      back_text: string;
    }
    export interface JSONSelectable {
      /**
      * **flashcards.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **flashcards.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **flashcards.bin**
      * - `int2` in database
      * - `NOT NULL`, default: `0`
      */
      bin: number;
      /**
      * **flashcards.last_answer_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_answer_at: db.TimestampString | null;
      /**
      * **flashcards.num_failed_answers**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_failed_answers: number;
      /**
      * **flashcards.front_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      front_text: string;
      /**
      * **flashcards.back_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      back_text: string;
    }
    export interface Whereable {
      /**
      * **flashcards.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flashcards.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flashcards.bin**
      * - `int2` in database
      * - `NOT NULL`, default: `0`
      */
      bin?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flashcards.last_answer_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_answer_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flashcards.num_failed_answers**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_failed_answers?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flashcards.front_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      front_text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flashcards.back_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      back_text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **flashcards.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **flashcards.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **flashcards.bin**
      * - `int2` in database
      * - `NOT NULL`, default: `0`
      */
      bin?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **flashcards.last_answer_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_answer_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **flashcards.num_failed_answers**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_failed_answers?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **flashcards.front_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      front_text: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **flashcards.back_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      back_text: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **flashcards.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **flashcards.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **flashcards.bin**
      * - `int2` in database
      * - `NOT NULL`, default: `0`
      */
      bin?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **flashcards.last_answer_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_answer_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **flashcards.num_failed_answers**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      num_failed_answers?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **flashcards.front_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      front_text?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **flashcards.back_text**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      back_text?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'flashcards_pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_migrations**
   * - Table in database
   */
  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_validation_emails**
   * - Table in database
   */
  export namespace user_validation_emails {
    export type Table = 'user_validation_emails';
    export interface Selectable {
      /**
      * **user_validation_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **user_validation_emails.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **user_validation_emails.sent_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      sent_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **user_validation_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **user_validation_emails.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **user_validation_emails.sent_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      sent_at: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **user_validation_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_validation_emails.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_validation_emails.sent_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      sent_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_validation_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_validation_emails.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_validation_emails.sent_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      sent_at: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_validation_emails.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_validation_emails.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_validation_emails.sent_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      sent_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_validation_emails_pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **users**
   * - Table in database
   */
  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **users.is_active**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_active: boolean;
    }
    export interface JSONSelectable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **users.is_active**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_active: boolean;
    }
    export interface Whereable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.is_active**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.is_active**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_active: boolean | db.Parameter<boolean> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.is_active**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_pk' | 'users_unique_email';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = flashcards.Table | schema_migrations.Table | user_validation_emails.Table | users.Table;
  export type Selectable = flashcards.Selectable | schema_migrations.Selectable | user_validation_emails.Selectable | users.Selectable;
  export type JSONSelectable = flashcards.JSONSelectable | schema_migrations.JSONSelectable | user_validation_emails.JSONSelectable | users.JSONSelectable;
  export type Whereable = flashcards.Whereable | schema_migrations.Whereable | user_validation_emails.Whereable | users.Whereable;
  export type Insertable = flashcards.Insertable | schema_migrations.Insertable | user_validation_emails.Insertable | users.Insertable;
  export type Updatable = flashcards.Updatable | schema_migrations.Updatable | user_validation_emails.Updatable | users.Updatable;
  export type UniqueIndex = flashcards.UniqueIndex | schema_migrations.UniqueIndex | user_validation_emails.UniqueIndex | users.UniqueIndex;
  export type Column = flashcards.Column | schema_migrations.Column | user_validation_emails.Column | users.Column;
  export type AllBaseTables = [flashcards.Table, schema_migrations.Table, user_validation_emails.Table, users.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [flashcards.Table, schema_migrations.Table, user_validation_emails.Table, users.Table];


  export type SelectableForTable<T extends Table> = {
    flashcards: flashcards.Selectable;
    schema_migrations: schema_migrations.Selectable;
    user_validation_emails: user_validation_emails.Selectable;
    users: users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    flashcards: flashcards.JSONSelectable;
    schema_migrations: schema_migrations.JSONSelectable;
    user_validation_emails: user_validation_emails.JSONSelectable;
    users: users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    flashcards: flashcards.Whereable;
    schema_migrations: schema_migrations.Whereable;
    user_validation_emails: user_validation_emails.Whereable;
    users: users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    flashcards: flashcards.Insertable;
    schema_migrations: schema_migrations.Insertable;
    user_validation_emails: user_validation_emails.Insertable;
    users: users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    flashcards: flashcards.Updatable;
    schema_migrations: schema_migrations.Updatable;
    user_validation_emails: user_validation_emails.Updatable;
    users: users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    flashcards: flashcards.UniqueIndex;
    schema_migrations: schema_migrations.UniqueIndex;
    user_validation_emails: user_validation_emails.UniqueIndex;
    users: users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    flashcards: flashcards.Column;
    schema_migrations: schema_migrations.Column;
    user_validation_emails: user_validation_emails.Column;
    users: users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    flashcards: flashcards.SQL;
    schema_migrations: schema_migrations.SQL;
    user_validation_emails: user_validation_emails.SQL;
    users: users.SQL;
  }[T];

}
